import java.util.*;

class Treenode {
	int data;
	Treenode left, right;

	Treenode(int data) {
		this.data = data;
		left = right = null;
	}
}

class Tree {
	Treenode root;

	Tree() {
		root = null;
	}
}

public class Main {

	public static int height(Treenode root) {
		if (root == null)
			return 0;
		return Math.max(height(root.left), height(root.right)) + 1;
	}

	public static int getcol(int h) {
		if (h == 1)
			return 1;
		return getcol(h - 1) + getcol(h - 1) + 1;
	}

	public static void printTree(int[][] M, Treenode root, int col, int row, int height) {
		if (root == null)
			return;
		M[row][col] = root.data;
		printTree(M, root.left, col - (int)Math.pow(2, height - 2), row + 1, height - 1);
		printTree(M, root.right, col + (int)Math.pow(2, height - 2), row + 1, height - 1);
	}

	public static void TreePrinter(Tree tree) {
		int h = height(tree.root);
		int col = getcol(h);
		int[][] M = new int[h][col];
		printTree(M, tree.root, col / 2, 0, h);
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < col; j++) {
				if (M[i][j] == 0)
					System.out.print(" ");
				else
					System.out.print(M[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		Tree myTree = new Tree();
		myTree.root = new Treenode(30);
		myTree.root.left = new Treenode(21);
		myTree.root.right = new Treenode(49);
		myTree.root.left.left = new Treenode(19);
		myTree.root.left.right = new Treenode(25);
		myTree.root.right.left = new Treenode(38);
		myTree.root.right.right = new Treenode(60);
		myTree.root.left.left.left = new Treenode(16);
		myTree.root.left.left.right = new Treenode(20);
		myTree.root.left.right.left = new Treenode(22);
		myTree.root.left.right.right = new Treenode(28);
		myTree.root.left.right.right.left = new Treenode(27);
		myTree.root.right.left.left = new Treenode(35);
		myTree.root.right.left.right = new Treenode(42);
		myTree.root.right.right.left = new Treenode(52);
		myTree.root.right.right.right = new Treenode(69);
		myTree.root.right.right.left.left = new Treenode(50);
		myTree.root.right.right.left.left.right = new Treenode(51);
		TreePrinter(myTree);
	}
}




import java.util.*;

class TreeNode {
    int data;
    TreeNode left, right;

    TreeNode(int data) {
        this.data = data;
        left = right = null;
    }
}

class Tree {
    TreeNode root;

    Tree() {
        root = null;
    }
}

public class BST {

    public static int height(TreeNode root) {
        if (root == null)
            return 0;
        return Math.max(height(root.left), height(root.right)) + 1;
    }

    public static int getCol(int h) {
        if (h == 1)
            return 1;
        return getCol(h - 1) * 2 + 1;
    }

    public static void printTree(TreeNode root, int level, int[] spaces) {
        if (root == null)
            return;

        int h = height(root);
        int width = getCol(h);

        int floor = width - (int) Math.pow(2, h - level - 1);
        for (int i = 0; i < spaces[0]; i++)
            System.out.print(" ");

        Queue<TreeNode> nodes = new LinkedList<>();
        nodes.add(root);
        while (!nodes.isEmpty()) {
            TreeNode node = nodes.poll();
            if (node == null) {
                System.out.print(" ");
                nodes.add(null);
                nodes.add(null);
            } else {
                System.out.print(node.data);
                nodes.add(node.left);
                nodes.add(node.right);
            }
            for (int i = 0; i < spaces[1]; i++) {
                if (i == spaces[1] / 2)
                    System.out.print(" ");
                else
                    System.out.print(" ");
            }
        }
        System.out.println();

        if (level + 1 == h)
            return;

        for (int i = 0; i < spaces[2]; i++)
            System.out.print(" ");

        for (int i = 0; i < spaces[3]; i++) {
            if (i == spaces[3] / 2)
                System.out.print("|");
            else
                System.out.print(" ");
        }
        System.out.println();

        int newSpaces[] = { spaces[0], (floor - spaces[0]) * 2 + 1, spaces[2], spaces[3] };
        printTree(root.left, level + 1, newSpaces);

        for (int i = 0; i < spaces[2]; i++)
            System.out.print(" ");

        for (int i = 0; i < spaces[3]; i++) {
            if (i == spaces[3] / 2)
                System.out.print("|");
            else
                System.out.print(" ");
        }
        System.out.println();

        newSpaces[0] = floor;
        newSpaces[2] = spaces[2] + spaces[3];
        printTree(root.right, level + 1, newSpaces);
    }

    public static void TreePrinter(Tree tree) {
        int h = height(tree.root);
        int[] spaces = { 0, 0, 0, 0 };
        printTree(tree.root, 0, spaces);
    }


        public static void main(String[] args) {
        Tree myTree = new Tree();
        myTree.root = new TreeNode(1);
        myTree.root.left = new TreeNode(2);
        myTree.root.right = new TreeNode(3);
        myTree.root.left.left = new TreeNode(4);
        myTree.root.left.right = new TreeNode(5);
        myTree.root.right.left = new TreeNode(6);
        myTree.root.right.right = new TreeNode(7);
        TreePrinter(myTree);
    }
}
