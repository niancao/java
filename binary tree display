import java.util.*;

class Node {
    int val;
    Node left, right;

    public Node(int val) {
        this.val = val;
        left = null;
        right = null;
    }
}
class Tree{
    Node root;

    Tree() {
        root = null;
    }
}
class BinaryTree {
    Node root;

    BinaryTree() { root = null; }

    void printInorder(Node node) {
        if (node == null)
            return;
        printInorder(node.left);
        System.out.print(node.val + " ");
        printInorder(node.right);
    }

    void printInorder() {
        printInorder(root);
    }

    void printPreorder(Node node) {
        if (node == null)
            return;
        System.out.print(node.val + " ");
        printPreorder(node.left);
        printPreorder(node.right);
    }

    void printPreorder() {
        printPreorder(root);
    }

    void printPostorder(Node node) {
        if (node == null)
            return;
        printPostorder(node.left);
        printPostorder(node.right);
        System.out.print(node.val + " ");
    }

    void printPostorder() {
        printPostorder(root);
    }
}


class BinaryTreePrinter {
    public static void print(Node root) {
        int maxLevel = maxLevel(root);

        printNodeInternal(Collections.singletonList(root), 1, maxLevel);
    }

    private static void printNodeInternal(List<Node> nodes, int level, int maxLevel) {
        if (nodes.isEmpty() || isAllElementsNull(nodes))
            return;

        int floor = maxLevel - level;
        int edgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));
        int firstSpaces = (int) Math.pow(2, (floor)) - 1;
        int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;

        printWhitespaces(firstSpaces);

        List<Node> newNodes = new ArrayList<>();
        for (Node node : nodes) {
            if (node != null) {
                System.out.print(node.val);
                newNodes.add(node.left);
                newNodes.add(node.right);
            } else {
                newNodes.add(null);
                newNodes.add(null);
                System.out.print(" ");
            }

            printWhitespaces(betweenSpaces);
        }
        System.out.println("");

        for (int i = 1; i <= edgeLines; i++) {
            for (int j = 0; j < nodes.size(); j++) {
                printWhitespaces(firstSpaces - i);
                if (nodes.get(j) == null) {
                    printWhitespaces(edgeLines + edgeLines + i + 1);
                    continue;
                }

                if (nodes.get(j).left != null)
                    System.out.print("/");
                else
                    printWhitespaces(1);

                printWhitespaces(i + i - 1);

                if (nodes.get(j).right != null)
                    System.out.print("\\");
                else
                    printWhitespaces(1);

                printWhitespaces(edgeLines + edgeLines - i);
            }

            System.out.println("");
        }

        printNodeInternal(newNodes, level + 1, maxLevel);
    }

    private static void printWhitespaces(int count) {
        for (int i = 0; i < count; i++)
            System.out.print(" ");
    }

    private static int maxLevel(Node node) {
        if (node == null)
            return 0;

        return Math.max(maxLevel(node.left), maxLevel(node.right)) + 1;
    }

    private static boolean isAllElementsNull(List list) {
        for (Object object : list) {
            if (object != null)
                return false;
        }

        return true;
    }
}

public class Main {
    public static void main(String[] args) {
    Tree myTree = new Tree();
    BinaryTree tree = new BinaryTree();
    myTree.root = new Node(30);
    myTree.root.left = new Node(21);
    myTree.root.right = new Node(49);
    myTree.root.left.left = new Node(19);
    myTree.root.left.right = new Node(25);
    myTree.root.right.left = new Node(38);
    myTree.root.right.right = new Node(60);
    myTree.root.left.left.left = new Node(16);
    myTree.root.left.left.right = new Node(20);
    myTree.root.left.right.left = new Node(22);
    myTree.root.left.right.right = new Node(28);
    myTree.root.left.right.right.left = new Node(27);
    myTree.root.right.left.left = new Node(35);
    myTree.root.right.left.right = new Node(42);
    myTree.root.right.right.left = new Node(52);
    myTree.root.right.right.right = new Node(69);
    myTree.root.right.right.left.left = new Node(50);
    myTree.root.right.right.left.left.right = new Node(51);
    
    tree.root = myTree.root;
    
    BinaryTreePrinter.print(myTree.root);
    
    System.out.println("\nPreorder traversal of binary tree is ");
    tree.printPreorder();
    System.out.println("\nInorder traversal of binary tree is ");
    tree.printInorder();
    System.out.println("\nPostorder traversal of binary tree is ");
    tree.printPostorder();
    }
}
